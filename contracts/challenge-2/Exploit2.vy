# @version ^0.3.7

from vyper.interfaces import ERC20 as IERC20

interface ICToken:
    def mint(mintAmount: uint256) -> uint256: nonpayable
    def borrow(borrowAmount: uint256) -> uint256: nonpayable
    def redeemUnderlying(redeemAmount: uint256) -> uint256: nonpayable

interface IWETH:
    def deposit(): payable
    def withdraw(x: uint256): nonpayable

interface IComptroller:
    def enterMarkets(cTokens: DynArray[address, 32]) -> DynArray[uint256, 32]: nonpayable
    def exitMarket(fToken: address) -> uint256: nonpayable
    def getAccountLiquidity(account: address) -> (uint256,uint256,uint256): view

interface IUniswap:
    def swap(amount0Out: uint256, amount1Out: uint256, to: address, data: Bytes[max_value(uint8)]): nonpayable

interface ICEther:
    def mint(): payable
    def borrow(x: uint256) -> uint256: nonpayable

interface IAMP:
    def registerCollateralManager(): nonpayable

interface IERC1820:
    def setInterfaceImplementer(_addr: address, _interfaceHash: bytes32, _implementer: address): nonpayable

interface IRouter:
    def swapTokensForExactETH(
        amountOut: uint256,
        amountInMax: uint256,
        path: DynArray[address, 32],
        to: address,
        deadline: uint256,
    ) -> DynArray[uint256, 32]: nonpayable

    def swapExactTokensForETH(
        amountIn: uint256,
        amountOutMin: uint256,
        path: DynArray[address, 32],
        to: address,
        deadline: uint256,
    ) -> DynArray[uint256, 32]: nonpayable

owner: immutable(address)

COMPTROLLER: constant(address) = 0x3d5BC3c8d13dcB8bF317092d84783c2697AE9258
CRAMP: constant(address) = 0x2Db6c82CE72C8d7D770ba1b5F5Ed0b6E075066d6
CRETH: constant(address) = 0xD06527D5e56A3495252A528C4987003b712860eE
CDAI: constant(address) = 0x92B767185fB3B04F881e3aC8e5B0662a027A1D9f

AMP: constant(address) = 0xfF20817765cB7f73d4bde2e66e067E58D11095C2
DAI: constant(address) = 0x6B175474E89094C44Da98b954EedeAC495271d0F
WETH: constant(address) = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

UNISWAP_POOL: constant(address) = 0x21b8065d10f73EE2e260e5B47D3344d3Ced7596E
V2_ROUTER: constant(address) = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D

AMP_WETH_POOL: constant(address) = 0x08650bb9dc722C9c8C62E79C2BAfA2d3fc5B3293

ERC_1820_REGISTRY: constant(address) = 0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24

AMP_TOKENS_RECIPIENT: constant(String[18]) = "AmpTokensRecipient"

@external
@payable
def __init__():
    owner = msg.sender

@external
def attack():
    assert msg.sender == owner, "!owner"

@external
def tokensReceived(
    functionSig: bytes4,
    partition: bytes32,
    operator: address,
    sender: address,
    to: address,
    amount: uint256,
    data: Bytes[max_value(uint8)],
    operatorData: Bytes[max_value(uint8)],
):
    pass

@external
@payable
def __default__():
    pass
